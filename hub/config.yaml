version: "v0.8-676f4f3"
#version: "v0.7"

rbac:
  enabled: true

hub:
  db:
    type: sqlite-pvc
    pvc:
      accessModes:
        - ReadWriteOnce
      storage: 1Gi
      storageClassName: managed-standard
  extraConfig:
   custom-spawner: |
    from kubespawner import KubeSpawner
    from tornado import gen
    import yaml
    
    with open('/etc/jupyterhub/config/values.yaml') as f:
       custom_config = yaml.safe_load(f).get('custom', {})
       
       
    class CustomKubeSpawner(KubeSpawner):
      @gen.coroutine
      def start(self):
        for attr, users in custom_config.get('memory', {}).items():
            if self.user.name in users:
              self.mem_limit = attr
              self.mem_guarantee = attr
              break

        for attr, users in custom_config.get('image', {}).items():
            if self.user.name in users:
              self.singleuser_image_spec = attr
              break

        for name, volume in custom_config.get('volumes').items():
            if self.user.name in volume['users']:
              # do not duplicate volume or volume mounts
              has_vol = list(filter(lambda x: x['name'] == name, self.volumes))
              if len(has_vol) > 0: break
              self.volumes.append({
                'name':name, 'hostPath': {'path': volume['hostPath']}
                })
              self.volume_mounts.append({
                'name':name, 'mountPath': volume['mountPath']
                })
              break

        ## Create shm volume -- docker's container limit is too small
        ## emptyDir['sizeLimit']: "1024M"
        #if not any(vol['name'] == 'shm' for vol in self.volumes):
        #    self.volumes.append({
        #        'name': 'shm', 'emptyDir': { 'medium': 'Memory' }
        #    })
        #if not any(vm['name'] == 'shm' for vm in self.volume_mounts):
        #    self.volume_mounts.append({
        #        'name': 'shm', 'mountPath': '/dev/shm'
        #    })

        # Assign users to node pools
        agentpool_config = custom_config.get('agentpool', {})
        default_agentpools = agentpool_config.get('_default', [])
        for user, attr in agentpool_config.items():
            agentpools = default_agentpools
            if self.user.name == user:
                agentpools = attr
            if len(agentpools) == 0: continue
            self.extra_pod_config = {
              'affinity': {
                'nodeAffinity': {
                  'requiredDuringSchedulingIgnoredDuringExecution': {
                    'nodeSelectorTerms': [
                      {
                        'matchExpressions': [
                          {
                            'key': 'agentpool',
                            'operator': 'In',
                            'values': agentpools
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }



        return (yield super().start())
    c.JupyterHub.spawner_class = CustomKubeSpawner

proxy:
  https:
    letsencrypt:
      contactEmail: rylo@berkeley.edu

cull:
  enabled: true
  timeout: 3600 # default

auth:
  type: google

singleuser:
  memory:
    guarantee: 1G
    limit: 1G
  image:
    name: "berkeleydsep/singleuser-data100"
  storage:
    type: hostPath
    extraVolumes:
      - name: home
        hostPath:
          path: /mnt/homes/{username}
      - name: nbgrader
        hostPath:
          path: /mnt/homes/_nbgrader
      - name: taxidb
        hostPath:
          path: /mnt/db
      #- name: newnbgrader1
      #  azureFile:
      #    secretName: azure-secret
      #    shareName: newnbgrader1
      #    readOnly: false
    extraVolumeMounts:
      - name: home
        mountPath: /home/jovyan
      - name: nbgrader
        mountPath: /srv/nbgrader
      - name: taxidb
        mountPath: /srv/db
      #- name: newnbgrader1
      #  mountPath: /srv/.trash
  #schedulerStrategy: pack
